#include<iostream>
#include<vector>
#include<queue>
#include<string>
using namespace std;
int N, M, ans = -1;
int dx[4] = { -1, 0, 1,  0 };
int dy[4] = {  0, 1, 0, -1 };
bool vst[51][51];
pair<int, int> start;
string in;
char maps[51][51];

struct XY
{
	int x, y, n, k;
};

void v_init()
{
	for (int i = 0; i < N; i++)
		for (int j = 0; j < M; j++)
			vst[i][j] = false;
}

// ���� ȹ�渶�� vst�ʱ�ȭ?
// ���� �� ȹ���� �Ŀ���, vst����
void bfs(int x, int y)
{
	int k, nk, n, nn, nx, ny;
	queue<XY> q;

	q.push({ x,y, 0, 0});
	vst[x][y] = true;
	
	while (!q.empty())
	{
		x = q.front().x;
		y = q.front().y;
		n = q.front().n;
		k = q.front().k;
		q.pop();

		cout << x << ", " << y << ": " << n << "," << k << '\n';

		nn = n + 1;

		for (int i = 0; i < 4; i++)
		{
			nk = k;
			nx = x + dx[i];
			ny = y + dy[i];			

			if( (0<=nx && nx < N) && (0 <= ny && ny < M))
				if (maps[nx][ny] != '#' && vst[nx][ny] == false)
				{
					// ���ε� ��������� ����Ұ�
					if ('A' <= maps[nx][ny] && maps[nx][ny] <= 'F')
						if( !(nk & (1 << (maps[nx][ny] - 'A'))) )
							continue;
					
					// ����� �����ϰ�, vst�ʱ�ȭ
					if ('a' <= maps[nx][ny] && maps[nx][ny] <= 'f')
					{
						v_init();
						nk |= (1 << (maps[nx][ny] - 'a'));
						maps[nx][ny] = '.';
					}
					
					// Ż��
					if (maps[nx][ny] == '1')
					{
						ans = nn;
						return;
					}
						
					vst[nx][ny] = true;
					q.push({ nx, ny, nn, nk});				
				}
		}
	}
}


int main()
{
	cin >> N >> M;

	for (int i = 0; i < N; i++)
	{
		cin >> in;

		for (int j = 0; j < M; j++)
		{
			maps[i][j] = in[j];

			if (maps[i][j] == '0')
				start = make_pair(i, j);
		}
	}
		
	for (int i = 0; i < N; i++) 
	{
		for (int j = 0; j < M; j++)
			cout << maps[i][j];
		cout << '\n';
	}
		
	bfs(start.first, start.second);
	cout << ans << '\n';
	return 0;
}
